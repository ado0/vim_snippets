extends c

##
## Preprocessor
# #include <...>
snippet incc
	#include <${1:iostream}>
snippet binc
	#include <boost/${1:shared_ptr}.hpp>
snippet inch
	#include "${1:iovec}.h"
##
## Define
snippet ind
	#ifndef _${1:name}_H_
	#define _${2:name}_H_

	${3}

	#endif
##
## STL Collections
# std::array
snippet arraya
	std::array<${1:T}, ${2:N}> ${3};
# std::vector
snippet vector
	std::vector<${1:T}> ${2};
# std::deque
snippet deque
	std::deque<${1:T}> ${2};
# std::forward_list
snippet flist
	std::forward_list<${1:T}> ${2};
# std::list
snippet list
	std::list<${1:T}> ${2};
# std::set
snippet set
	std::set<${1:T}> ${2};
# std::map
snippet map
	std::map<${1:Key}, ${2:T}> ${3};
# std::multiset
snippet mset
	std::multiset<${1:T}> ${2};
# std::multimap
snippet mmap
	std::multimap<${1:Key}, ${2:T}> ${3};
# std::unordered_set
snippet uset
	std::unordered_set<${1:T}> ${2};
# std::unordered_map
snippet umap
	std::unordered_map<${1:Key}, ${2:T}> ${3};
# std::unordered_multiset
snippet umset
	std::unordered_multiset<${1:T}> ${2};
# std::unordered_multimap
snippet ummap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};
# std::stack
snippet stack
	std::stack<${1:T}> ${2};
# std::queue
snippet queue
	std::queue<${1:T}> ${2};
# std::priority_queue
snippet pqueue
	std::priority_queue<${1:T}> ${2};
##
## Access Modifiers
# private
snippet pri
	private
# protected
snippet pro
	protected
# public
snippet pub
	public
# friend
snippet fr
	friend
# mutable
snippet mu
	mutable
##
## Class
# class
snippet cld
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
		private:

		public:
			$1(){}
			~$1(){}
	};

snippet cl
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
		private:
			${2:type_1} _${3:el_1};
		public:
			$1()
			{
			//default
			}

			$1($1&& from) 
			: _$3{from._$3}
			{
			//move
			}

			$1(const $1& from)
			: _$3{from._$3}
			{
			//copy
			}

			$1(const $2 $3, const $4 $5)
			: _$3{$3}{}

			~$1(){}

			$1& operator=($1&&);
			$1& operator=(const $1&);

			virtual $2 $3() const { return _$3; }

			virtual $2& $3() { return _$3; }
	};

	$1& $1::operator=($1&& from)
	{
		this->$3 = from.$3;

		return *this;
	}

	$1& $1::operator=(const $1& from)
	{
		_$3 = from._$3;

		return *this;
	}

snippet cll
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
		private:
			${2:type_1} _${3:el_1};
			${4:type_2} _${5:el_2};
		public:
			$1()
			{
			//default
			}

			$1($1&& from) 
			: _$3{from._$3}, _$5{from._$5}
			{
			//move
			}

			$1(const $1& from)
			: _$3{from._$3}, _$5{from._$5}
			{
			//copy
			}

			$1(const $2 $3, const $4 $5)
			: _$3{$3}, _$5{$5}{}

			~$1(){}

			$1& operator=($1&&);
			$1& operator=(const $1&);

			virtual $2 $3() const { return _$3; }
			virtual $4 $5() const { return _$5; }

			virtual $2& $3() { return _$3; }
			virtual $4& $5() { return _$5; }
	};

	$1& $1::operator=($1&& from)
	{

		_$3 = from._$3;
		_$5 = from._$5;

		return *this;
	}

	$1& $1::operator=(const $1& from)
	{
		_$3 = from._$3;
		_$5 = from._$5;

		return *this;
	}

snippet clll
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
		private:
			${2:type_1} _${3:el_1};
			${4:type_2} _${5:el_2};
			${6:type_3} _${7:el_3};
		public:
			$1()
			{
			//default
			}

			$1($1&& from) 
			: _$3{from._$3}, _$5{from._$5}, _$7{from._$7}
			{
			//move
			}

			$1(const $1& from)
			: _$3{from._$3}, _$5{from._$5}, _$7{from._$7}
			{
			//copy
			}

			$1(const $2 $3, const $4 $5, const $6 $7)
			: _$3{$3}, _$5{$5}, _$7{$7}{}

			~$1(){}

			$1& operator=($1&&);
			$1& operator=(const $1&);

			virtual $2 $3() const { return _$3; }
			virtual $4 $5() const { return _$5; }
			virtual $6 $7() const { return _$7; }

			virtual $2& $3() { return _$3; }
			virtual $4& $5() { return _$5; }
			virtual $6& $7() { return _$7; }
	};

	$1& $1::operator=($1&& from)
	{
		_$3 = from._$3;
		_$5 = from._$5;
		_$7 = from._$7;

		return *this;
	}

	$1& $1::operator=(const $1& from)
	{
		_$3 = from._$3;
		_$5 = from._$5;
		_$7 = from._$7;

		return *this;
	}

snippet cllll
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
		private:
			${2:type_1} _${3:el_1};
			${4:type_2} _${5:el_2};
			${6:type_3} _${7:el_3};
			${8:type_4} _${9:el_4};
		public:
			$1()
			{
			//default
			}

			$1($1&& from) 
			: _$3{from._$3}, _$5{from._$5}, _$7{from._$7}, _$9{from._$9}
			{
			//move
			}

			$1(const $1& from)
			: _$3{from._$3}, _$5{from._$5}, _$7{from._$7}, _$9{from._$9}
			{
			//copy
			}

			$1(const $2 $3, const $4 $5, const $6 $7, const $8 $9)
			: _$3{$3}, _$5{$5}, _$7{$7}, _$9{$9} {}

			~$1(){}

			$1& operator=($1&&);
			$1& operator=(const $1&);

			virtual $2 $3() const { return _$3; }
			virtual $4 $5() const { return _$5; }
			virtual $6 $7() const { return _$7; }
			virtual $8 $9() const { return _$9; }

			virtual $2& $3() { return _$3; }
			virtual $4& $5() { return _$5; }
			virtual $6& $7() { return _$7; }
			virtual $8& $9() { return _$9; }
	};

	$1& $1::operator=($1&& from)
	{
		_$3 = from._$3;
		_$5 = from._$5;
		_$7 = from._$7;
		_$9 = from._$9;

		return *this;
	}

	$1& $1::operator=(const $1& from)
	{
		_$3 = from._$3;
		_$5 = from._$5;
		_$7 = from._$7;
		_$9 = from._$9;

		return *this;
	}

# member function implementation
snippet mfun
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
# namespace
snippet ns
	namespace ${1:`vim_snippets#Filename('', 'my')`}
	{
		${0}
	} /* namespace $1 */

# fstream
snippet left
	friend std::ostream& operator<<(std::ostream& out, const ${1:`vim_snippets#Filename('$1', 'ClassName')`}& $1_out);

snippet leftf
	std::ostream& operator<<(std::ostream& out, const ${1:`vim_snippets#Filename('$1', 'ClassName')`}& $1_out)
	{
		return out
	}
##
## Input/Output
# std::cout
snippet cout
	std::cout << ${1} << std::endl;
# std::cin
snippet cin
	std::cin >> ${1};
##
## Casts
# static
snippet sca
	static_cast<${1:unsigned}>(${2:expr})${3}
# dynamic
snippet dca
	dynamic_cast<${1:unsigned}>(${2:expr})${3}
# reinterpret
snippet rca
	reinterpret_cast<${1:unsigned}>(${2:expr})${3}
# const
snippet cca
	const_cast<${1:unsigned}>(${2:expr})${3}
## Iteration
# for i
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++})
	{
		${4}
	}

# foreach
snippet fore
	for (${1:auto} ${2:i} : ${3:container})
	{
		${4}
	}
# iterator
snippet iter
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}

# auto iterator
snippet itera
	for (auto ${1:i} = begin(${2:container}); $1 != end($2); ++$1)
	{
		${3:std::cout << *$1 << std::endl;}
	}
##
## Lambdas
# lamda (one line)
snippet ld
	[${1}](${2}){${3}};
# lambda (multi-line)
snippet lld
	[${1}](${2}){
		${3}
	};
# methods
snippet get
	${2:type} ${1:get}() const { return _$1; }

snippet gets
	std::string ${1:get}() const { return _$1; }

snippet geti
	int ${1:get}() const { return _$1; }

snippet getf
	float ${1:get}() const { return _$1; }

snippet getc
	char ${1:get}() const { return _$1; }

snippet getb
	bool ${1:get}() const { return _$1; }

snippet set
	${2:type}& ${1:set}() { return _$1; }

snippet sets
	std::string& ${1:set}() { return _$1; }

snippet seti
	int& ${1:set}() { return _$1; }

snippet setf
	float& ${1:set}() { return _$1; }

snippet setc
	char& ${1:set}() { return _$1; }

snippet setb
	bool& ${1:set}() { return _$1; }

snippet vget
	virtual ${2:type} ${1:get}() const { return _$1; }

snippet vgets
	virtual std::string ${1:get}() const { return _$1; }

snippet vgeti
	virtual int ${1:get}() const { return _$1; }

snippet vgetf
	virtual float ${1:get}() const { return _$1; }

snippet vgetc
	virtual char ${1:get}() const { return _$1; }

snippet vgetb
	virtual bool ${1:get}() const { return _$1; }

snippet vset
	virtual ${2:type}& ${1:set}() { return _$1; }

snippet vsets
	virtual std::string& ${1:set}() { return _$1; }

snippet vseti
	virtual int& ${1:set}() { return _$1; }

snippet vsetf
	virtual float& ${1:set}() { return _$1; }

snippet vsetc
	virtual char& ${1:set}() { return _$1; }

snippet vsetb
	virtual bool& ${1:set}() { return _$1; }

# private members
snippet add
	${2:type} _${1:name};

snippet addp
	${2:type}* _${1:name};

snippet adds
	std::string _${1:name};

snippet addi
	int _${1:name};

snippet addf
	float _${1:name};

snippet addb
	bool _${1:name};

# left shift
snippet shift
	<< ${1:`vim_snippets#Filename('$1', 'ClassName')`_out}._${3}<< '${2:}'
	<< $1._${4} << '$2'
	<< $1._${5} << '$2'
	<< $1._${6} << '$2'
	<< $1._${7} << '$2'
	<< $1._${8} << '$2'
	<< $1._${9} << '$2'

